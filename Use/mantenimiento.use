model monitorMantenimiento

--Clases

class CRA
  operations
  errorDetected(v:Vehiculo, a:Atraccion)
    begin
      --La CRA busca un operario de mantenimiento disponible
      if self.dispositivos->select(d|d.isAvailable)->size()>0 then
        self.dispositivos->select(d|d.isAvailable)->asSequence()->first().fixVehicle(v,a);
      else
        v.signalNotAttended()
      end
    end

    pre AtraccionNoFunciona: not a.working
    pre VehiculoNoFunciona: not v.isWorking
    pre VehiculoNoEstaSiendoAtendido : v.arregla->select(a|a.fixed=false)->size()=0
    pre VehiculoSinSenal: not v.signalWaitingOperator


 revisionComplete(d:Dispositivo)
     begin
      if Vehiculo.allInstances()->select(v|v.signalWaitingOperator=true)->size()>0 
      then
        declare v:Vehiculo;
        v:=Vehiculo.allInstances()->select(v|v.signalWaitingOperator=true)->asSequence()->first();
        v.signalAttended();
        d.fixVehicle(v,v.atraccion);
      end
     end
     pre OperarioDisponible: d.isAvailable
  	
end

class Dispositivo
  attributes
    avisosResueltos: Integer derive=self.arregla->select(a|a.fixed)->size()
    isAvailable: Boolean derive=self.arregla->size()>=1 implies self.arregla.forAll(a|a.fixed)
  operations
    fixVehicle(v:Vehiculo, a:Atraccion)
      begin
        declare ar:Arregla;
        ar:= new Arregla;
        --self.isAvailable :=false;
        ar.fixed:=false;
        insert (ar,v) into ArreglaVehiculo;
        insert (ar,self) into ArreglaDispositivo;
      end
      pre VehiculoNoFuncionando: not v.isWorking
      pre AtraccionNoFuncionando: not a.working
      pre VehiculoNoEstaSiendoAtendido : v.arregla->select(a|a.fixed=false)->size()=0
      pre DispositivoDisponible : self.isAvailable

      
      post HayUnArreglaActivo: v.arregla->select(a|a.fixed=false)->size()=1
      post OperarioDisponible: not self.isAvailable
      post VehiculoNoFunciona: not v.isWorking
      post AtraccionNoFunciona: not a.working
      
	


    finishRevision()
      begin
        --self.isAvailable:=false;
        self.arregla->select(a|a.fixed=false)->asSequence()->first().vehiculo.revisionComplete();
        self.arregla->select(a|a.fixed=false)->asSequence()->first().fixed:=true;
      end
      pre OperarioArreglando: not self.isAvailable
      pre UnArreglaActivo: self.arregla->select(a|a.fixed=false)->size()=1
      pre VehiculoNoFuncionando: self.arregla->select(a|not a.fixed)->asSequence()->first().vehiculo.isWorking=false
      pre AtraccionNoFuncionando :self.arregla->select(a|not a.fixed)->asSequence()->first().vehiculo.atraccion.working=false
      post VehiculoConUnArreglaMas: self.avisosResueltos =self.avisosResueltos@pre + 1
      post NoArreglaPendiente:self.arregla->select(a|not a.fixed)->size()=0
      post DispositivoDisponible: self.isAvailable
      
      
  statemachines
    psm Free
      states
        s:initial
        Occupied[not self.isAvailable]
        Free[self.isAvailable]
      transitions
       s->Free
       Free->Occupied{fixVehicle()}
       Occupied->Free{finishRevision()}
  end
end

class Operario
end

class Atraccion
  attributes
    street: String
    working: Boolean derive=self.allWorking()
  operations
    allWorking():Boolean = self.vehiculos->forAll(v|v.isWorking)
    errorDetected(v:Vehiculo)
      begin
       --self.working := false
      end
    pre isMine:self.vehiculos->exists(c| c=v)
    pre isBroken: not v.isWorking
    post stop: not self.working

    revisionComplete(v:Vehiculo)
      begin
       --if self.vehiculos->forAll(c|c.isWorkingg) then
       --    self.working := true;
       --end
      end
    pre isMine: self.vehiculos->exists(c|c=v)
    pre isFixed: v.isWorking
    post state: if self.vehiculos->forAll(c|c.isWorking) then self.working else not self.working endif

  statemachines
    psm Working
      states
        s:initial
        Working [self.working]
        Broken [not self.working]
      transitions
        s->Working
        Working->Broken {errorDetected()}
        Broken->Working {[self.allWorking()] revisionComplete()}
        Broken->Broken {[not self.allWorking()] revisionComplete()}
        Broken->Broken {errorDetected()}
    end
end

class Noria < Atraccion
end

class Rusa < Atraccion
end

class Vehiculo
  attributes
    number: Integer
    isWorking: Boolean init: true
    signalWaitingOperator: Boolean init: false
  operations
    signalNotAttended()
      begin
	      self.signalWaitingOperator:=true;
      end
      pre VehiculoNofunciona: not self.isWorking 
      pre VehiculoSinSenal : not self.signalWaitingOperator
      pre NoArreglasActivos : self.arregla->select(a|not a.fixed)->size()=0
      pre AtraccionNoFunciona: not self.atraccion.working

      post SenalActiva: self.signalWaitingOperator
      post VehiculoNofuncionaTodavia: not self.isWorking
      post AtraccionNoFuncionaTodavia: not self.atraccion.working
      post NoArreglasActivosTodavia: self.arregla->select(a|not a.fixed)->size()=0

      
    errorDetected()
      begin
        self.isWorking:=false;
        self.atraccion.errorDetected(self);
        self.atraccion.cra.errorDetected(self, self.atraccion);
      end
      pre VehiculoFuncionando: self.isWorking
      pre VehiculoSinSenal: not self.signalWaitingOperator
      pre NoArreglasActivos:self.arregla->select(a|not a.fixed)->size()=0
      post VehiculoNoFuncionando: not self.isWorking
      post AtraccionNoFuncionando: not self.atraccion.working
      
      
    revisionComplete()
      begin
	      self.isWorking:=true
      end
      pre NoArreglasActivos: self.arregla->select(a|not a.fixed)->size()=0
      pre VehiculoSiendoAtendido: not self.signalWaitingOperator
      post VehiculoFuncionando : self.isWorking
      post NoSenalActiva: not self.signalWaitingOperator
      
    signalAttended()
      begin
	      self.signalWaitingOperator:=false
      end
      pre VehiculoNoFunciona: not self.isWorking
      pre SenalNoAtendida: self.signalWaitingOperator
      pre OperarioAsignado:self.arregla->select(a|not a.fixed)->size()=1
      pre AtraccionNoFunciona: not self.atraccion.working
      
      post signalAttended: not self.signalWaitingOperator
      post VehiculoNoFuncionaTodavia: not self.isWorking
      post AtraccionNoFuncionaTodavia: not self.atraccion.working
      post OperarioAsignadoTodavia:self.arregla->select(a|not a.fixed)->size()=1
      
	
  statemachines
    psm Broken
      states
        s:initial
        Working [self.isWorking]
        Broken [not self.isWorking]
        Waiting [not self.isWorking and self.signalWaitingOperator]
      transitions
        s->Working
        Working->Broken {[self.atraccion.cra.dispositivos->select(d|d.isAvailable)->size()>0] errorDetected()}
        Working->Waiting {[self.atraccion.cra.dispositivos->select(d|d.isAvailable)->size()=0] errorDetected()}
        Broken->Working {revisionComplete()}
        Waiting->Broken {signalAttended()}
    end
end

class Arregla
  attributes
    fixed: Boolean init: false
end

--Relaciones

association ArreglaVehiculo between
  Arregla [*] role arregla
  Vehiculo [1] role vehiculo
end

association ArreglaDispositivo between
  Arregla [*] role arregla
  Dispositivo [1] role dispositivo
end

composition AtraccionVehiculo between
  Atraccion [1] role atraccion
  Vehiculo [1..*] role vehiculos
end

association Monitoriza between
  CRA [1] role cra
  Atraccion [*] role atraccion
end

composition Administracion between
  CRA [1] role cra
  Dispositivo [1..*] role dispositivos
end

association DispositivoOperario between
  Dispositivo [1] role dispositivo
  Operario [1] role operario
end

constraints
